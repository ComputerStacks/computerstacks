// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String?           @unique
  emailVerified      DateTime?
  image              String?
  isAdmin            Boolean           @default(false)
  favoriteCategories Category[]
  favoriteResources  Resource[]
  roadmaps           Roadmap[]
  accounts           Account[]
  sessions           Session[]
  resourceComments   ResourceComment[]
  roadmapComment     RoadmapComment[]
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  uri              String     @id
  name             String
  description      String
  level            Int
  parentId         String?
  favoriteUsers    User[]
  parent           Category?  @relation(name: "categories", fields: [parentId], references: [uri], onDelete: Restrict, onUpdate: Restrict)
  categoryChildren Category[] @relation("categories")
  resourceChildren Resource[]

  @@index([parentId])
}

model Resource {
  uri         String            @id
  name        String
  description String
  level       Int
  link        String
  author      String
  timestamp   DateTime
  users       User[]
  parentId    String
  parent      Category          @relation(fields: [parentId], references: [uri])
  comments    ResourceComment[]

  @@index([parentId])
}

model Roadmap {
  uri         String           @id
  name        String
  description String
  level       Int
  image       String           @db.Text
  users       User[]
  comments    RoadmapComment[]
}

model Event {
  uri         String   @id
  name        String
  description String
  date        DateTime
  duration    Int
}

model ResourceComment {
  id         Int      @id @default(autoincrement())
  content    String
  timestamp  DateTime
  author     User     @relation(fields: [userId], references: [id])
  parent     Resource @relation(fields: [resourceId], references: [uri])
  userId     String
  resourceId String

  @@index([userId])
  @@index([resourceId])
}

model RoadmapComment {
  id        Int      @id @default(autoincrement())
  content   String
  timestamp DateTime
  author    User     @relation(fields: [userId], references: [id])
  parent    Roadmap  @relation(fields: [roadmapId], references: [uri])
  userId    String
  roadmapId String

  @@index([userId])
  @@index([roadmapId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
